(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{497:function(t,e,s){},524:function(t,e,s){"use strict";var a=s(497);s.n(a).a},583:function(t,e,s){"use strict";s.r(e);var a=[{excerpt:" / [10. 正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/)  给你一个字符串 `s` 和一个字符规律 `p`，请你来实现一个支持 `'.'` 和 `'*'` 的正则表达式匹配。  - `'.'` 匹配任意单个字符 - `'*'` 匹配零个或多个前面的那一个元素  所谓匹配，是要涵盖 **整个......",tags:["_未分类_"],id:0,title:"10. 正则表达式匹配",lastUpdated:"2020-12-05 11:19:34",path:"/posts/10.%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D.html"},{excerpt:"  [1002. 查找常用字符](https://leetcode-cn.com/problems/find-common-characters/)  给定仅有小写字母组成的字符串数组 `A`，返回列表中的每个字符串中都显示的全部字符（**包括重复字符**）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。  你可以按任意顺序返......",tags:["_未分类_"],id:1,title:"1002. 查找常用字符",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1002.%20%E6%9F%A5%E6%89%BE%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6.html"},{excerpt:"  [1022. 从根到叶的二进制数之和](https://leetcode-cn.com/problems/sum-of-root-to-leaf-binary-numbers/)  给出一棵二叉树，其上每个结点的值都是 `0` 或 `1` 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 `0 -> 1 -> 1 -> 0 -> 1`，那么它表示二进制数 `......",tags:["_未分类_"],id:2,title:"1022. 从根到叶的二进制数之和",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1022.%20%E4%BB%8E%E6%A0%B9%E5%88%B0%E5%8F%B6%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E4%B9%8B%E5%92%8C.html"},{excerpt:"  [1030. 距离顺序排列矩阵单元格](https://leetcode-cn.com/problems/matrix-cells-in-distance-order/)  给出 `R` 行 `C` 列的矩阵，其中的单元格的整数坐标为 `(r, c)`，满足 `0 <= r < R` 且 `0 <= c < C`。  另外，我们在该矩阵中给出了一个坐标为 `(r0, c0)` 的单元格......",tags:["_未分类_"],id:3,title:"1030. 距离顺序排列矩阵单元格",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1030.%20%E8%B7%9D%E7%A6%BB%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%88%97%E7%9F%A9%E9%98%B5%E5%8D%95%E5%85%83%E6%A0%BC.html"},{excerpt:"  [1036. 逃离大迷宫](https://leetcode-cn.com/problems/escape-a-large-maze/)  在一个 10^6 x 10^6 的网格中，每个网格块的坐标为 `(x, y)`，其中 `0 <= x, y < 10^6`。  我们从源方格 `source` 开始出发，意图赶往目标方格 `target`。每次移动，我们都可以走到网格中在四个方向上......",tags:["_未分类_"],id:4,title:"1036. 逃离大迷宫",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1036.%20%E9%80%83%E7%A6%BB%E5%A4%A7%E8%BF%B7%E5%AE%AB.html"},{excerpt:"  [1042. 不邻接植花](https://leetcode-cn.com/problems/flower-planting-with-no-adjacent/)  tag:graph  有 `N` 个花园，按从 `1` 到 `N` 标记。在每个花园中，你打算种下四种花之一。  `paths[i] = [x, y]` 描述了花园 `x` 到花园 `y` 的双向路径。  另外，没有花园有......",tags:["_未分类_"],id:5,title:"1042. 不邻接植花",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1042.%20%E4%B8%8D%E9%82%BB%E6%8E%A5%E6%A4%8D%E8%8A%B1.html"},{excerpt:"  [105. 从前序与中序遍历序列构造二叉树](https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)  根据一棵树的前序遍历与中序遍历构造二叉树。  **注意:**  你可以假设树中没有重复的元素。  例如，给出  ``` 前序遍历 preorder = [......",tags:["Tree"],id:6,title:"105. 从前序与中序遍历序列构造二叉树",lastUpdated:"2020-12-05 11:19:34",path:"/posts/105.%20%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html"},{excerpt:"  [1092. 最短公共超序列](https://leetcode-cn.com/problems/shortest-common-supersequence/)  给出两个字符串 `str1` 和 `str2`，返回同时以 `str1` 和 `str2` 作为子序列的最短字符串。如果答案不止一个，则可以返回满足条件的任意一个答案。  （如果从字符串 T 中删除一些字符（也可能不删除，并......",tags:["_未分类_"],id:7,title:"1092. 最短公共超序列",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1092.%20%E6%9C%80%E7%9F%AD%E5%85%AC%E5%85%B1%E8%B6%85%E5%BA%8F%E5%88%97.html"},{excerpt:"  [1122. 数组的相对排序](https://leetcode-cn.com/problems/relative-sort-array/)  给你两个数组，`arr1` 和 `arr2`，  - `arr2` 中的元素各不相同 - `arr2` 中的每个元素都出现在 `arr1` 中  对 `arr1` 中的元素进行排序，使 `arr1` 中项的相对顺序和 `arr2` 中的相对顺序......",tags:["_未分类_"],id:8,title:"1122. 数组的相对排序",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1122.%20%E6%95%B0%E7%BB%84%E7%9A%84%E7%9B%B8%E5%AF%B9%E6%8E%92%E5%BA%8F.html"},{excerpt:"  [114. 二叉树展开为链表](https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/)  给定一个二叉树，[原地](https://baike.baidu.com/item/原地算法/8010757)将它展开为一个单链表。     例如，给定二叉树  ```     1    / \\   2   5  ......",tags:["Tree"],id:9,title:"114. 二叉树展开为链表",lastUpdated:"2020-12-05 11:19:34",path:"/posts/114.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8.html"},{excerpt:"  [c1245. 树的直径](https://leetcode-cn.com/problems/tree-diameter/)  给你这棵「无向树」，请你测算并返回它的「直径」：这棵树上最长简单路径的 **边数**。  我们用一个由所有「边」组成的数组 `edges` 来表示一棵无向树，其中 `edges[i] = [u, v]` 表示节点 `u` 和 `v` 之间的双向边。  树上的节......",tags:["_未分类_"],id:10,title:"1245. 树的直径",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1245.%20%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.html"},{excerpt:"  [1167. 连接棒材的最低费用](https://leetcode-cn.com/problems/minimum-cost-to-connect-sticks/)  为了装修新房，你需要加工一些长度为正整数的棒材 `sticks`。  如果要将长度分别为 `X` 和 `Y` 的两根棒材连接在一起，你需要支付 `X + Y` 的费用。 由于施工需要，你必须将所有棒材连接成一根。  返......",tags:["_未分类_"],id:11,title:"1167. 连接棒材的最低费用",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1167.%20%E8%BF%9E%E6%8E%A5%E6%A3%92%E6%9D%90%E7%9A%84%E6%9C%80%E4%BD%8E%E8%B4%B9%E7%94%A8.html"},{excerpt:"  [1277. 统计全为 1 的正方形子矩阵](https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/)  给你一个 `m * n` 的矩阵，矩阵中的元素不是 `0` 就是 `1`，请你统计并返回其中完全由 `1` 组成的 **正方形** 子矩阵的个数。  dp   **示例 1：**  ``` 输......",tags:["_未分类_"],id:12,title:"1277. 统计全为 1 的正方形子矩阵",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1277.%20%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA%201%20%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5.html"},{excerpt:"  [129. 求根到叶子节点数字之和](https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/)  给定一个二叉树，它的每个结点都存放一个 `0-9` 的数字，每条从根到叶子节点的路径都代表一个数字。  例如，从根到叶子节点路径 `1->2->3` 代表数字 `123`。  计算从根到叶子节点生成的所有数字之和。  **说明:......",tags:["Tred"],id:13,title:"129. 求根到叶子节点数字之和",lastUpdated:"2020-12-05 11:19:34",path:"/posts/129.%20%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C.html"},{excerpt:"  [1338. 数组大小减半](https://leetcode-cn.com/problems/reduce-array-size-to-the-half/)  给你一个整数数组 `arr`。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。  返回 **至少** 能删除数组中的一半整数的整数集合的最小大小。     **示例 1：**  ``` 输入：arr = [3,3......",tags:["_未分类_"],id:14,title:"1338. 数组大小减半",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1338.%20%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%8D%8A.html"},{excerpt:"  [1345. 跳跃游戏 IV](https://leetcode-cn.com/problems/jump-game-iv/)  给你一个整数数组 `arr` ，你一开始在数组的第一个元素处（下标为 0）。  每一步，你可以从下标 `i` 跳到下标：  - `i + 1` 满足：`i + 1 < arr.length` - `i - 1` 满足：`i - 1 >= 0` - `j` 满......",tags:["_未分类_"],id:15,title:"1345. 跳跃游戏 IV",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1345.%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%20IV.html"},{excerpt:"  [1356. 根据数字二进制下 1 的数目排序](https://leetcode-cn.com/problems/sort-integers-by-the-number-of-1-bits/)  给你一个整数数组 `arr` 。请你将数组中的元素按照其二进制表示中数字 **1** 的数目升序排序。  如果存在多个数字二进制中 **1** 的数目相同，则必须将它们按照数值大小升序排列。......",tags:["_未分类_"],id:16,title:"1356. 根据数字二进制下 1 的数目排序",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1356.%20%E6%A0%B9%E6%8D%AE%E6%95%B0%E5%AD%97%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8B%201%20%E7%9A%84%E6%95%B0%E7%9B%AE%E6%8E%92%E5%BA%8F.html"},{excerpt:"  [1368. 使网格图至少有一条有效路径的最小代价](https://leetcode-cn.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/)  给你一个 m x n 的网格图 `grid` 。 `grid` 中每个格子都有一个数字，对应着从该格子出发下一步走的方向。 `grid[i][j]` 中......",tags:["_未分类_"],id:17,title:"1368. 使网格图至少有一条有效路径的最小代价",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1368.%20%E4%BD%BF%E7%BD%91%E6%A0%BC%E5%9B%BE%E8%87%B3%E5%B0%91%E6%9C%89%E4%B8%80%E6%9D%A1%E6%9C%89%E6%95%88%E8%B7%AF%E5%BE%84%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7.html"},{excerpt:"  [1383. 最大的团队表现值](https://leetcode-cn.com/problems/maximum-performance-of-a-team/)  公司有编号为 `1` 到 `n` 的 `n` 个工程师，给你两个数组 `speed` 和 `efficiency` ，其中 `speed[i]` 和 `efficiency[i]` 分别代表第 `i` 位工程师的速度和效率......",tags:["_未分类_"],id:18,title:"1383. 最大的团队表现值",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1383.%20%E6%9C%80%E5%A4%A7%E7%9A%84%E5%9B%A2%E9%98%9F%E8%A1%A8%E7%8E%B0%E5%80%BC.html"},{excerpt:"  [1388. 3n 块披萨](https://leetcode-cn.com/problems/pizza-with-3n-slices/)  给你一个披萨，它由 3n 块不同大小的部分组成，现在你和你的朋友们需要按照如下规则来分披萨：  - 你挑选 **任意** 一块披萨。 - Alice 将会挑选你所选择的披萨逆时针方向的下一块披萨。 - Bob 将会挑选你所选择的披萨顺时针方向的......",tags:["_未分类_"],id:19,title:"1388. 3n 块披萨",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1388.%203n%20%E5%9D%97%E6%8A%AB%E8%90%A8.html"},{excerpt:"  [164. 最大间距](https://leetcode-cn.com/problems/maximum-gap/)  给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。  如果数组元素个数小于 2，则返回 0。  **示例 1:**  ``` 输入: [3,6,9,1] 输出: 3 解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) ......",tags:["排序"],id:20,title:"164.最大间距",lastUpdated:"2020-12-05 11:19:34",path:"/posts/164.%E6%9C%80%E5%A4%A7%E9%97%B4%E8%B7%9D.html"},{excerpt:" / [19. 删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)  给定一个链表，删除链表的倒数第 *n* 个节点，并且返回链表的头结点。  **示例：**  ``` 给定一个链表: 1->2->3->4->5, 和 n = 2.  当删除了倒数第二个节点后，链表变为 1->2......",tags:["Linklist"],id:21,title:"19. 删除链表的倒数第N个节点",lastUpdated:"2020-12-05 11:19:34",path:"/posts/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html"},{excerpt:"  [190. 颠倒二进制位](https://leetcode-cn.com/problems/reverse-bits/)  颠倒给定的 32 位无符号整数的二进制位。     **示例 1：**  ``` 输入: 00000010100101000001111010011100 输出: 00111001011110000010100101000000 解释: 输入的二进制串 0000......",tags:["_未分类_"],id:22,title:"190. 颠倒二进制位",lastUpdated:"2020-12-05 11:19:34",path:"/posts/190.%20%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D.html"},{excerpt:"  [1530. 好叶子节点对的数量](https://leetcode-cn.com/problems/number-of-good-leaf-nodes-pairs/)  tag：tree  给你二叉树的根节点 `root` 和一个整数 `distance` 。  如果二叉树中两个 **叶** 节点之间的 **最短路径长度** 小于或者等于 `distance` ，那它们就可以构成一组......",tags:["_未分类_"],id:23,title:"1530. 好叶子节点对的数量",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1530.%20%E5%A5%BD%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E5%AF%B9%E7%9A%84%E6%95%B0%E9%87%8F.html"},{excerpt:"  [1443. 收集树上所有苹果的最少时间](https://leetcode-cn.com/problems/minimum-time-to-collect-all-apples-in-a-tree/)  给你一棵有 `n` 个节点的无向树，节点编号为 `0` 到 `n-1` ，它们中有一些节点有苹果。通过树上的一条边，需要花费 1 秒钟。你从 **节点 0** 出发，请你返回最少需要......",tags:["_未分类_"],id:24,title:"1443. 收集树上所有苹果的最少时间",lastUpdated:"2020-12-05 11:19:34",path:"/posts/1443.%20%E6%94%B6%E9%9B%86%E6%A0%91%E4%B8%8A%E6%89%80%E6%9C%89%E8%8B%B9%E6%9E%9C%E7%9A%84%E6%9C%80%E5%B0%91%E6%97%B6%E9%97%B4.html"},{excerpt:"  [152. 乘积最大子数组](https://leetcode-cn.com/problems/maximum-product-subarray/)  给你一个整数数组 `nums` ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。     **示例 1:**  ``` 输入: [2,3,-2,4] 输出: 6 解释: 子数组 [2,3]......",tags:["_未分类_"],id:25,title:"152. 乘积最大子数组",lastUpdated:"2020-12-05 11:19:34",path:"/posts/152.%20%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84.html"},{excerpt:"  [206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)  反转一个单链表。  **示例:**  ``` 输入: 1->2->3->4->5->NULL 输出: 5->4->3->2->1->NULL ```  **进阶:**  你可以迭代或递归地反转链表。你能否用两种方法解决这道题？    ```cpp /*......",tags:["Linkedlist"],id:26,title:"206. 反转链表",lastUpdated:"2020-12-05 11:19:34",path:"/posts/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.html"},{excerpt:" 23. 合并K个升序链表  给你一个链表数组，每个链表都已经按升序排列。  请你将所有链表合并到一个升序链表中，返回合并后的链表。     示例 1：  输入：lists = [[1,4,5],[1,3,4],[2,6]] 输出：[1,1,2,3,4,4,5,6] 解释：链表数组如下： [   1->4->5,   1->3->4,   2->6 ] 将它们合并到一个有序链表中得到。 1->1-......",tags:["Linklist"],id:27,title:"23.合并K个升序链表",lastUpdated:"2020-12-05 11:19:34",path:"/posts/23.%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8.html"},{excerpt:"  [230. 二叉搜索树中第K小的元素](https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/)  tag:BST  给定一个二叉搜索树，编写一个函数 `kthSmallest` 来查找其中第 **k** 个最小的元素。  **说明：**  你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。  **示......",tags:["_未分类_"],id:28,title:"230. 二叉搜索树中第K小的元素",lastUpdated:"2020-12-05 11:19:34",path:"/posts/230.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0.html"},{excerpt:"  [297. 二叉树的序列化与反序列化](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/)  序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。  请设计一个算法来实现二......",tags:["_未分类_"],id:29,title:"297. 二叉树的序列化与反序列化",lastUpdated:"2020-12-05 11:19:34",path:"/posts/297.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html"},{excerpt:"  [307. 区域和检索 - 数组可修改](https://leetcode-cn.com/problems/range-sum-query-mutable/)  给定一个整数数组  *nums*，求出数组从索引 *i* 到 *j* (*i* ≤ *j*) 范围内元素的总和，包含 *i, j* 两点。  *update(i, val)* 函数可以通过将下标为 *i* 的数值更新为 *va......",tags:["_未分类_"],id:30,title:"307. 区域和检索 - 数组可修改",lastUpdated:"2020-12-05 11:19:34",path:"/posts/307.%20%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2%20-%20%E6%95%B0%E7%BB%84%E5%8F%AF%E4%BF%AE%E6%94%B9.html"},{excerpt:" [312. 戳气球](https://leetcode-cn.com/problems/burst-balloons/)  有 `n` 个气球，编号为`0` 到 `n-1`，每个气球上都标有一个数字，这些数字存在数组 `nums` 中。  现在要求你戳破所有的气球。如果你戳破气球 `i` ，就可以获得 `nums[left] * nums[i] * nums[right]` 个硬币。 这......",tags:["_未分类_"],id:31,title:"312. 戳气球",lastUpdated:"2020-12-05 11:19:34",path:"/posts/312.%20%E6%88%B3%E6%B0%94%E7%90%83.html"},{excerpt:"  [32. 最长有效括号](https://leetcode-cn.com/problems/longest-valid-parentheses/)  给定一个只包含 `'('` 和 `')'` 的字符串，找出最长的包含有效括号的子串的长度。  **示例 1:**  ``` 输入: \"(()\" 输出: 2 解释: 最长有效括号子串为 \"()\" ```  **示例 2:**  ``` 输入......",tags:["String"],id:32,title:"32. 最长有效括号",lastUpdated:"2020-12-05 11:19:34",path:"/posts/32.%20%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.html"},{excerpt:" [315. 计算右侧小于当前元素的个数](https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/)  tag：fenwick tree  给定一个整数数组 *nums*，按要求返回一个新数组 *counts*。数组 *counts* 有该性质： `counts[i]` 的值是 `nums[i]` 右侧小于......",tags:["_未分类_"],id:33,title:"315. 计算右侧小于当前元素的个数",lastUpdated:"2020-12-05 11:19:34",path:"/posts/315.%20%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0.html"},{excerpt:"  [327. 区间和的个数](https://leetcode-cn.com/problems/count-of-range-sum/)  给定一个整数数组 `nums`，返回区间和在 `[lower, upper]` 之间的个数，包含 `lower` 和 `upper`。  区间和 `S(i, j)` 表示在 `nums` 中，位置从 `i` 到 `j` 的元素之和，包含 `i` 和 ......",tags:["_未分类_"],id:34,title:"327. 区间和的个数",lastUpdated:"2020-12-05 11:19:34",path:"/posts/327.%20%E5%8C%BA%E9%97%B4%E5%92%8C%E7%9A%84%E4%B8%AA%E6%95%B0.html"},{excerpt:" [376. 摆动序列](https://leetcode-cn.com/problems/wiggle-subsequence/)  如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为**摆动序列。**第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。  例如， `[1,7,4,9,2,5]` 是一个摆动序列，因为差值 `(6,-3,5,-7,3)` ......",tags:["_未分类_"],id:35,title:"376. 摆动序列",lastUpdated:"2020-12-05 11:19:34",path:"/posts/376.%20%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html"},{excerpt:' [336. 回文对](https://leetcode-cn.com/problems/palindrome-pairs/)  给定一组 **互不相同** 的单词， 找出所有**不同** 的索引对`(i, j)`，使得列表中的两个单词， `words[i] + words[j]` ，可拼接成回文串。     **示例 1：**  ``` 输入：["abcd","dcba","lls","......',tags:["_未分类_"],id:36,title:"336. 回文对",lastUpdated:"2020-12-05 11:19:34",path:"/posts/336.%20%E5%9B%9E%E6%96%87%E5%AF%B9.html"},{excerpt:" [381. O(1) 时间插入、删除和获取随机元素 - 允许重复](https://leetcode-cn.com/problems/insert-delete-getrandom-o1-duplicates-allowed/)  设计一个支持在*平均* 时间复杂度 **O(1)** 下**，** 执行以下操作的数据结构。  **注意: 允许出现重复元素。**  1. `insert(v......",tags:["_未分类_"],id:37,title:"381. O(1) 时间插入、删除和获取随机元素 - 允许重复",lastUpdated:"2020-12-05 11:19:34",path:"/posts/381.%20O(1)%20%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0%20-%20%E5%85%81%E8%AE%B8%E9%87%8D%E5%A4%8D.html"},{excerpt:' [388. 文件的最长绝对路径](https://leetcode-cn.com/problems/longest-absolute-file-path/)  假设我们以下述方式将我们的文件系统抽象成一个字符串:  字符串 `"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext"` 表示:  ``` dir     subdir1     subdir2   ......',tags:["_未分类_"],id:38,title:"388. 文件的最长绝对路径",lastUpdated:"2020-12-05 11:19:34",path:"/posts/388.%20%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E9%95%BF%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84.html"},{excerpt:" [399. 除法求值](https://leetcode-cn.com/problems/evaluate-division/)  tag：并查集  给出方程式 `A / B = k`, 其中 `A` 和 `B` 均为用字符串表示的变量， `k` 是一个浮点型数字。根据已知方程式求解问题，并返回计算结果。如果结果不存在，则返回 `-1.0`。  输入总是有效的。你可以假设除法运算中不会出......",tags:["_未分类_"],id:39,title:"399. 除法求值",lastUpdated:"2020-12-05 11:19:34",path:"/posts/399.%20%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC.html"},{excerpt:"  [42. 接雨水](https://leetcode-cn.com/problems/trapping-rain-water/)  给定 *n* 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。  ![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/r......",tags:["Stack"],id:40,title:"42. 接雨水",lastUpdated:"2020-12-05 11:19:34",path:"/posts/42.%20%E6%8E%A5%E9%9B%A8%E6%B0%B4.html"},{excerpt:"  [44. 通配符匹配](https://leetcode-cn.com/problems/wildcard-matching/)  tag：dp  给定一个字符串 (`s`) 和一个字符模式 (`p`) ，实现一个支持 `'?'` 和 `'*'` 的通配符匹配。  ``` '?' 可以匹配任何单个字符。 '*' 可以匹配任意字符串（包括空字符串）。 ```  两个字符串**完全匹配**......",tags:["String"],id:41,title:"44. 通配符匹配",lastUpdated:"2020-12-05 11:19:34",path:"/posts/44.%20%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D.html"},{excerpt:"   BFS模板  ```cpp vector<vector<int>> levelOrder(TreeNode* root) {     queue<TreeNode*> q;     q.push(root);     //...     while(q.size())     {         int size=q.size();         //...         for(i......",tags:["_未分类_"],id:42,title:"5000.BFS模板",lastUpdated:"2020-12-05 11:19:34",path:"/posts/5000.BFS%E6%A8%A1%E6%9D%BF.html"},{excerpt:"  [50. Pow(x, n)](https://leetcode-cn.com/problems/powx-n/)  实现 [pow(*x*, *n*)](https://www.cplusplus.com/reference/valarray/pow/) ，即计算 x 的 n 次幂函数。  **示例 1:**  ``` 输入: 2.00000, 10 输出: 1024.00000 `......",tags:["_未分类_"],id:43,title:"50. Pow(x, n)",lastUpdated:"2020-12-05 11:19:34",path:"/posts/50.%20Pow(x,%20n).html"},{excerpt:" [351. 安卓系统手势解锁](https://leetcode-cn.com/problems/android-unlock-patterns/)  我们都知道安卓有个手势解锁的界面，是一个 **3 x 3** 的点所绘制出来的网格。  给你两个整数，分别为 **m** 和 **n**，其中 1 ≤ m ≤ n ≤ 9，那么请你统计一下有多少种解锁手势，是至少需要经过 **m** 个点......",tags:["_未分类_"],id:44,title:"351. 安卓系统手势解锁",lastUpdated:"2020-12-05 11:19:34",path:"/posts/351.%20%E5%AE%89%E5%8D%93%E7%B3%BB%E7%BB%9F%E6%89%8B%E5%8A%BF%E8%A7%A3%E9%94%81.html"},{excerpt:"  地板拼接（字节20201011第三题）  博客来源：https://blog.csdn.net/u014634338/article/details/50015825  这个题目的题意很容易理解，在一个N*M的格子里，我们现在有两种类型的 砖块，1 * 2 和 2 * 1，问一共有多少种方案，可以将整个N*M的空间都填满。  最简单的例子就是下面的了：  ![img](https://im......",tags:["_未分类_"],id:45,title:"5003.地板拼接（字节20201011第三题）",lastUpdated:"2020-12-05 11:19:34",path:"/posts/5003.%E5%9C%B0%E6%9D%BF%E6%8B%BC%E6%8E%A5%EF%BC%88%E5%AD%97%E8%8A%8220201011%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%89.html"},{excerpt:"  求强连通分量  Kosaraju算法：https://zh.wikipedia.org/wiki/Kosaraju%E7%AE%97%E6%B3%95  https://edwiv.com/archives/564    Tarjan算法：https://zh.wikipedia.org/wiki/Tarjan%E7%AE%97%E6%B3%95     并查集详解  图文解说：h......",tags:["_未分类_"],id:46,title:"5001.求强连通分量",lastUpdated:"2020-12-05 11:19:34",path:"/posts/5001.%E6%B1%82%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.html"},{excerpt:"  输出所有的最长公共子串  上述讲到使用动态规划可以在 θ(mn) 的时间里求出 LCS 的长度，下面将讨论如何输出最长公共子串。  问题描述：给定两个序列，例如 X = “ABCBDAB”、Y = “BDCABA”，求它们的最长公共子串的长度。  下面是求解时的动态规划表，可以看出 X 和 Y 的最长公共子串的长度为2：  ![img](https://pic3.zhimg.com/80/......",tags:["_未分类_"],id:47,title:"5004.输出所有的最长公共子串",lastUpdated:"2020-12-05 11:19:34",path:"/posts/5004.%E8%BE%93%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2.html"},{excerpt:" [556. 下一个更大元素 III](https://leetcode-cn.com/problems/next-greater-element-iii/)  tag：string  给定一个**32位**正整数 **n**，你需要找到最小的**32位**整数，其与 **n** 中存在的位数完全相同，并且其值大于n。如果不存在这样的**32位**整数，则返回-1。  **示例 1:** ......",tags:["_未分类_"],id:48,title:"556. 下一个更大元素 III",lastUpdated:"2020-12-05 11:19:34",path:"/posts/556.%20%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0%20III.html"},{excerpt:" [600. 不含连续1的非负整数](https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/)(难题)  tag：dp  给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 **连续的1** 的个数。  **示例 1:**  ``` 输入: 5 输出: 5 解释:......",tags:["_未分类_"],id:49,title:"600. 不含连续1的非负整数",lastUpdated:"2020-12-05 11:19:34",path:"/posts/600.%20%E4%B8%8D%E5%90%AB%E8%BF%9E%E7%BB%AD1%E7%9A%84%E9%9D%9E%E8%B4%9F%E6%95%B4%E6%95%B0.html"},{excerpt:" [617. 合并二叉树](https://leetcode-cn.com/problems/merge-two-binary-trees/)  给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。  你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则**不为** NULL 的节点将直接作为新二叉树......",tags:["_未分类_"],id:50,title:"617. 合并二叉树",lastUpdated:"2020-12-05 11:19:34",path:"/posts/617.%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.html"},{excerpt:" 21. 任务调度器  给定一个用字符数组表示的 CPU 需要执行的任务列表。其中包含使用大写的 A - Z 字母表示的26 种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。CPU 在任何一个单位时间内都可以执行一个任务，或者在待命状态。  然而，两个相同种类的任务之间必须有长度为 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，......",tags:["_未分类_"],id:51,title:"621.任务调度器",lastUpdated:"2020-12-05 11:19:34",path:"/posts/621.%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8.html"},{excerpt:"  636. 函数的独占时间](https://leetcode-cn.com/problems/exclusive-time-of-functions/)  tag：stack  给出一个非抢占单线程CPU的 **n** 个函数运行日志，找到函数的独占时间。  每个函数都有一个唯一的 Id，从 **0** 到 **n-1**，函数可能会递归调用或者被其他函数调用。  日志是具有以下格式的......",tags:["_未分类_"],id:52,title:"636. 函数的独占时间",lastUpdated:"2020-12-05 11:19:34",path:"/posts/636.%20%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4.html"},{excerpt:"  [684. 冗余连接](https://leetcode-cn.com/problems/redundant-connection/)  tag：并查集  在本问题中, 树指的是一个连通且无环的**无向**图。  输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。 ......",tags:["_未分类_"],id:53,title:"684. 冗余连接",lastUpdated:"2020-12-05 11:19:34",path:"/posts/684.%20%E5%86%97%E4%BD%99%E8%BF%9E%E6%8E%A5.html"},{excerpt:" [72. 编辑距离](https://leetcode-cn.com/problems/edit-distance/)  给你两个单词 *word1* 和 *word2*，请你计算出将 *word1* 转换成 *word2* 所使用的最少操作数 。  你可以对一个单词进行如下三种操作：  1. 插入一个字符 2. 删除一个字符 3. 替换一个字符     **示例 1：**  ``` 输......",tags:["_未分类_"],id:54,title:"72. 编辑距离",lastUpdated:"2020-12-05 11:19:34",path:"/posts/72.%20%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB.html"},{excerpt:"  [722. 删除注释](https://leetcode-cn.com/problems/remove-comments/)  tag：string  给一个 C++ 程序，删除程序中的注释。这个程序`source`是一个数组，其中`source[i]`表示第`i`行源码。 这表示每行源码由`\\n`分隔。  在 C++ 中有两种注释风格，行内注释和块注释。  字符串`//` 表示行注释......",tags:["_未分类_"],id:55,title:"722. 删除注释",lastUpdated:"2020-12-05 11:19:34",path:"/posts/722.%20%E5%88%A0%E9%99%A4%E6%B3%A8%E9%87%8A.html"},{excerpt:" \\767. Reorganize String  Medium  Given a string `S`, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.  If possible, output any possible ......",tags:["_未分类_"],id:56,title:"767. Reorganize String_贪心",lastUpdated:"2020-12-05 11:19:34",path:"/posts/767.%20Reorganize%20String_%E8%B4%AA%E5%BF%83.html"},{excerpt:"  [787. K 站中转内最便宜的航班](https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/)  有 `n` 个城市通过 `m` 个航班连接。每个航班都从城市 `u` 开始，以价格 `w` 抵达 `v`。  现在给定所有的城市和航班，以及出发城市 `src` 和目的地 `dst`，你的任务是找到从 `src`......",tags:["_未分类_"],id:57,title:"787. K 站中转内最便宜的航班",lastUpdated:"2020-12-05 11:19:34",path:"/posts/787.%20K%20%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD.html"},{excerpt:" [572. 另一个树的子树](https://leetcode-cn.com/problems/subtree-of-another-tree/)  给定两个非空二叉树 **s** 和 **t**，检验 **s** 中是否包含和 **t** 具有相同结构和节点值的子树。**s** 的一个子树包括 **s** 的一个节点和这个节点的所有子孙。**s** 也可以看做它自身的一棵子树。  **......",tags:["_未分类_"],id:58,title:"572. 另一个树的子树",lastUpdated:"2020-12-05 11:19:34",path:"/posts/572.%20%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91.html"},{excerpt:" ubuntu系统安装cuda后，鼠标键盘失效解决办法    首先明确，本人的情况是Windows + ubuntu18.04。再安装了cuda10.0后，重启电脑再进入桌面，鼠标和键盘就失效拉，不能用，这个时候需要强制关机。  再次开机，由于是双系统，会自动进入grub引导界面，就是选择系统进入界面。  \\1. 选中ubuntu, 按 e 进入编辑界面  \\2. 在编辑界面的倒数第二行，就算现实......",tags:["_未分类_"],id:59,title:"8000.ubuntu系统安装cuda后，鼠标键盘失效解决办法",lastUpdated:"2020-12-05 11:19:34",path:"/posts/8000.ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85cuda%E5%90%8E%EF%BC%8C%E9%BC%A0%E6%A0%87%E9%94%AE%E7%9B%98%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95.html"},{excerpt:'  [818. 赛车](https://leetcode-cn.com/problems/race-car/)  你的赛车起始停留在位置 0，速度为 +1，正行驶在一个无限长的数轴上。（车也可以向负数方向行驶。）  你的车会根据一系列由 A（加速）和 R（倒车）组成的指令进行自动驾驶 。  当车得到指令 "A" 时, 将会做出以下操作： `position += speed, speed ......',tags:["_未分类_"],id:60,title:"818. 赛车",lastUpdated:"2020-12-05 11:19:34",path:"/posts/818.%20%E8%B5%9B%E8%BD%A6.html"},{excerpt:'  [842. 将数组拆分成斐波那契序列](https://leetcode-cn.com/problems/split-array-into-fibonacci-sequence/)  给定一个数字字符串 `S`，比如 `S = "123456579"`，我们可以将它分成斐波那契式的序列 `[123, 456, 579]`。  形式上，斐波那契式序列是一个非负整数列表 `F`，且满足： ......',tags:["_未分类_"],id:61,title:"842. 将数组拆分成斐波那契序列",lastUpdated:"2020-12-05 11:19:34",path:"/posts/842.%20%E5%B0%86%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86%E6%88%90%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%BA%8F%E5%88%97.html"},{excerpt:"  [860. 柠檬水找零](https://leetcode-cn.com/problems/lemonade-change/)  在柠檬水摊上，每一杯柠檬水的售价为 `5` 美元。  顾客排队购买你的产品，（按账单 `bills` 支付的顺序）一次购买一杯。  每位顾客只买一杯柠檬水，然后向你付 `5` 美元、`10` 美元或 `20` 美元。你必须给每个顾客正确找零，也就是说净交易是每......",tags:["_未分类_"],id:62,title:"860. 柠檬水找零",lastUpdated:"2020-12-05 11:19:34",path:"/posts/860.%20%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6.html"},{excerpt:"  [845. 数组中的最长山脉](https://leetcode-cn.com/problems/longest-mountain-in-array/)  我们把数组 A 中符合下列属性的任意连续子数组 B 称为 “*山脉”*：  - `B.length >= 3` - 存在 `0 < i < B.length - 1` 使得 `B[0] < B[1] < ... B[i-1] < B......",tags:["_未分类_"],id:63,title:"845. 数组中的最长山脉",lastUpdated:"2020-12-05 11:19:34",path:"/posts/845.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.html"},{excerpt:"  [847. 访问所有节点的最短路径](https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/)  给出 `graph` 为有 N 个节点（编号为 `0, 1, 2, ..., N-1`）的无向连通图。   `graph.length = N`，且只有节点 `i` 和 `j` 连通时，`j != i` 在列表 ......",tags:["_未分类_"],id:64,title:"847. 访问所有节点的最短路径",lastUpdated:"2020-12-05 11:19:34",path:"/posts/847.%20%E8%AE%BF%E9%97%AE%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.html"},{excerpt:'  [864. 获取所有钥匙的最短路径](https://leetcode-cn.com/problems/shortest-path-to-get-all-keys/)  给定一个二维网格 `grid`。 `"."` 代表一个空房间， `""` 代表一堵墙， `"@"` 是起点，（`"a"`, `"b"`, ...）代表钥匙，（`"A"`, `"B"`, ...）代表锁。  我们从起点......',tags:["_未分类_"],id:65,title:"864. 获取所有钥匙的最短路径",lastUpdated:"2020-12-05 11:19:34",path:"/posts/864.%20%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E9%92%A5%E5%8C%99%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.html"},{excerpt:"  [874. 模拟行走机器人](https://leetcode-cn.com/problems/walking-robot-simulation/)  机器人在一个无限大小的网格上行走，从点 (0, 0) 处开始出发，面向北方。该机器人可以接收以下三种类型的命令：  - `-2`：向左转 90 度 - `-1`：向右转 90 度 - `1 <= x <= 9`：向前移动 `x` 个单位......",tags:["_未分类_"],id:66,title:"874. 模拟行走机器人",lastUpdated:"2020-12-05 11:19:34",path:"/posts/874.%20%E6%A8%A1%E6%8B%9F%E8%A1%8C%E8%B5%B0%E6%9C%BA%E5%99%A8%E4%BA%BA.html"},{excerpt:"  [894. 所有可能的满二叉树](https://leetcode-cn.com/problems/all-possible-full-binary-trees/)  *满二叉树*是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。  返回包含 `N` 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。  答案中每个树的每个`结点`都**必须**有 `node......",tags:["_未分类_"],id:67,title:"894. 所有可能的满二叉树",lastUpdated:"2020-12-05 11:19:34",path:"/posts/894.%20%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html"},{excerpt:" 928. 尽量减少恶意软件的传播 II  (这个问题与 尽量减少恶意软件的传播 是一样的，不同之处用粗体表示。)  在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。  一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多......",tags:["_未分类_"],id:68,title:"928.尽量减少恶意软件的传播 II",lastUpdated:"2020-12-05 11:19:34",path:"/posts/928.%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%20II.html"},{excerpt:"  [934. 最短的桥](https://leetcode-cn.com/problems/shortest-bridge/)  在给定的二维二进制数组 `A` 中，存在两座岛。（岛是由四面相连的 `1` 形成的一个最大组。）  现在，我们可以将 `0` 变为 `1`，以使两座岛连接起来，变成一座岛。  返回必须翻转的 `0` 的最小数目。（可以保证答案至少是 1。）     **示例 ......",tags:["_未分类_"],id:69,title:"934. 最短的桥",lastUpdated:"2020-12-05 11:19:34",path:"/posts/934.%20%E6%9C%80%E7%9F%AD%E7%9A%84%E6%A1%A5.html"},{excerpt:"  [998. 最大二叉树 II](https://leetcode-cn.com/problems/maximum-binary-tree-ii/)  最大树定义：一个树，其中每个节点的值都大于其子树中的任何其他值。  给出最大树的根节点 `root`。  就像[之前的问题](https://leetcode-cn.com/problems/maximum-binary-tree/)那样......",tags:["_未分类_"],id:70,title:"998. 最大二叉树 II",lastUpdated:"2020-12-05 11:19:34",path:"/posts/998.%20%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91%20II.html"},{excerpt:" 56. Merge Intervals  Medium  Given a collection of intervals, merge all overlapping intervals.  **Example 1:**  ``` Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Ex......",tags:["Array"],id:71,title:"56. Merge Intervals",lastUpdated:"2020-10-02 21:39:10",path:"/posts/56.%20Merge%20Intervals.html"},{excerpt:" 56. Merge Intervals   Medium  Given a collection of intervals, merge all overlapping intervals.  **Example 1:**  ``` Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] E......",tags:["_未分类_"],id:72,title:"Merge Intervals_back()函数",lastUpdated:"2020-10-02 21:39:10",path:"/posts/56.%20Merge%20Intervals_back()%E5%87%BD%E6%95%B0.html"},{excerpt:" 134. Gas Station  Medium  There are *N* gas stations along a circular route, where the amount of gas at station *i* is `gas[i]`.  You have a car with an unlimited gas tank and it costs `cost[i]` of......",tags:["_未分类_"],id:73,title:"134. Gas Station",lastUpdated:"2020-10-02 21:33:44",path:"/posts/134.%20Gas%20Station.html"},{excerpt:" 166. Fraction to Recurring Decimal  Medium  Given two integers representing the `numerator` and `denominator` of a fraction, return *the fraction in string format*.  If the fractional part is repea......",tags:["_未分类_"],id:74,title:"166. Fraction to Recurring Decimal",lastUpdated:"2020-10-02 21:30:56",path:"/posts/166.%20Fraction%20to%20Recurring%20Decimal.html"},{excerpt:" 142. Linked List Cycle II  Medium  Given a linked list, return the node where the cycle begins. If there is no cycle, return `null`.  There is a cycle in a linked list if there is some node in the ......",tags:["_未分类_"],id:75,title:"142. Linked List Cycle II",lastUpdated:"2020-10-02 21:26:26",path:"/posts/142.%20Linked%20List%20Cycle%20II.html"},{excerpt:"\\57. Insert Interval  Medium  Given a set of *non-overlapping* intervals, insert a new interval into the intervals (merge if necessary).  You may assume that the intervals were initially sorted accord......",tags:["_未分类_"],id:76,title:"Insert Interval",lastUpdated:"2020-10-02 21:26:26",path:"/posts/57.%20Insert%20Interval.html"},{excerpt:" [84. 柱状图中最大的矩形](https://leetcode-cn.com/problems/largest-rectangle-in-histogram/)  给定 *n* 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。  求在该柱状图中，能够勾勒出来的矩形的最大面积。     ![img](https://assets.leetcode-cn.co......",tags:["_未分类_"],id:77,title:"柱状图中最大的矩形_堆栈",lastUpdated:"2020-10-02 21:26:26",path:"/posts/84.%20%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2_%E5%A0%86%E6%A0%88.html"},{excerpt:"400.Nth Digit  Medium  Find the *n*th digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...   **Note:**  *n* is positive and will fit within the range of a 32-bit signed inte......",tags:["_未分类_"],id:78,title:"Nth Digit",lastUpdated:"2020-10-02 21:15:51",path:"/posts/400.Nth%20Digit.html"},{excerpt:"\\406. Queue Reconstruction by Height  Medium  Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers `(h, k)`, where `h` is the height of the pe......",tags:["_未分类_"],id:79,title:"Queue Reconstruction by Height_sort与insert",lastUpdated:"2020-10-02 21:15:51",path:"/posts/406.%20Queue%20Reconstruction%20by%20Height_sort%E4%B8%8Einsert.html"},{excerpt:"\\424. Longest Repeating Character Replacement  Medium  Given a string `s` that consists of only uppercase English letters, you can perform at most `k` operations on that string.  In one operation, y......",tags:["_未分类_"],id:80,title:"Longest Repeating Character Replacement_滑窗问题",lastUpdated:"2020-10-02 21:15:51",path:"/posts/424.%20Longest%20Repeating%20Character%20Replacement_%E6%BB%91%E7%AA%97%E9%97%AE%E9%A2%98.html"},{excerpt:" 436. Find Right Interval  Medium  You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**.  The **r****ight** **interval** for an interval `i` i......",tags:["_未分类_"],id:81,title:"436. Find Right Interval",lastUpdated:"2020-10-02 21:15:51",path:"/posts/436.%20Find%20Right%20Interval.html"},{excerpt:"\\41. First Missing Positive  Hard  Given an unsorted integer array, find the smallest missing positive integer.  **Example 1:**  ``` Input: [1,2,0] Output: 3 ```  **Example 2:**  ``` Input: [3,4,-1,......",tags:["Array"],id:82,title:"First Missing Positive",lastUpdated:"2020-10-02 21:15:51",path:"/posts/41.%20First%20Missing%20Positive.html"},{excerpt:"\\496. Next Greater Element I  Easy  You are given two arrays **(without duplicates)** `nums1` and `nums2` where `nums1`’s elements are subset of `nums2`. Find all the next greater numbers for `nums1......",tags:["_未分类_"],id:83,title:"496. Next Greater Element I_标志位+find()",lastUpdated:"2020-10-02 21:15:51",path:"/posts/496.%20Next%20Greater%20Element%20I_%E6%A0%87%E5%BF%97%E4%BD%8D+find().html"},{excerpt:" \\564. Find the Closest Palindrome  Hard  Given an integer n, find the closest integer (not including itself), which is a palindrome.   The 'closest' is defined as absolute difference minimized betw......",tags:["_未分类_"],id:84,title:"564. Find the Closest Palindrome",lastUpdated:"2020-10-02 21:15:51",path:"/posts/564.%20Find%20the%20Closest%20Palindrome.html"},{excerpt:" \\592. Fraction Addition and Subtraction  Medium  Given a string representing an expression of fraction addition and  subtraction, you need to return the calculation result in string format. The fin......",tags:["_未分类_"],id:85,title:"592. Fraction Addition and Subtraction",lastUpdated:"2020-10-02 21:15:51",path:"/posts/592.%20Fraction%20Addition%20and%20Subtraction.html"},{excerpt:" 530. Minimum Absolute Difference in BST  Easy  Given a binary search tree with non-negative values, find the minimum [absolute difference](https://en.wikipedia.org/wiki/Absolute_difference) between......",tags:["_未分类_"],id:86,title:"530. Minimum Absolute Difference in BST",lastUpdated:"2020-10-02 21:15:51",path:"/posts/530.%20Minimum%20Absolute%20Difference%20in%20BST.html"},{excerpt:" \\611. Valid Triangle Number  Medium  Given an array consists of non-negative integers,  your task is to count the  number of triplets chosen from the array that can make triangles if we  take them as......",tags:["_未分类_"],id:87,title:"611. Valid Triangle Number",lastUpdated:"2020-10-02 21:15:51",path:"/posts/611.%20Valid%20Triangle%20Number.html"},{excerpt:" \\678. Valid Parenthesis String  Medium  Given a string containing only three types of characters: '(', ')' and  '*', write a function to check whether this string is valid. We define  the validity ......",tags:["_未分类_"],id:88,title:"678. Valid Parenthesis String_可选与强制匹配",lastUpdated:"2020-10-02 21:15:51",path:"/posts/678.%20Valid%20Parenthesis%20String_%E5%8F%AF%E9%80%89%E4%B8%8E%E5%BC%BA%E5%88%B6%E5%8C%B9%E9%85%8D.html"},{excerpt:"  630. Course Schedule III  Hard  There are `n` different online courses numbered from `1` to `n`. Each course has some duration(course length) `t` and closed on `dth` day. A course should be taken ......",tags:["_未分类_"],id:89,title:"630. Course Schedule III_PQ",lastUpdated:"2020-10-02 21:15:51",path:"/posts/630.%20Course%20Schedule%20III_PQ.html"},{excerpt:" \\707. Design Linked List  Medium  Design your implementation of the linked list. You can choose to use a singly or doubly linked list.  A node in a singly linked list should have two attributes: `val......",tags:["_未分类_"],id:90,title:"707. Design Linked List",lastUpdated:"2020-10-02 21:15:51",path:"/posts/707.%20Design%20Linked%20List%20.html"},{excerpt:" 713. Subarray Product Less Than K  Medium  Your are given an array of positive integers `nums`.  Count and print the number of (contiguous) subarrays where the product of all the elements in the su......",tags:["_未分类_"],id:91,title:"713. Subarray Product Less Than K",lastUpdated:"2020-10-02 21:15:51",path:"/posts/713.%20Subarray%20Product%20Less%20Than%20K.html"},{excerpt:' 724. Find Pivot Index  Easy  Given an array of integers `nums`, write a method that returns the "pivot" index of this array.  We define the pivot index as the index where the sum of all the  number......',tags:["_未分类_"],id:92,title:"724. Find Pivot Index",lastUpdated:"2020-10-02 21:15:51",path:"/posts/724.%20Find%20Pivot%20Index.html"},{excerpt:" 763. Partition Labels Medium  A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and re......",tags:["_未分类_"],id:93,title:"763.Partition Labels",lastUpdated:"2020-10-02 21:15:51",path:"/posts/763.Partition%20Labels.html"},{excerpt:" \\732. My Calendar III  Hard  Implement a `MyCalendarThree` class to store your events. A new event can **always** be added.  Your class will have one method, `book(int start, int end)`. Formally, t......",tags:["_未分类_"],id:94,title:"732. My Calendar III_哈希",lastUpdated:"2020-10-02 21:15:51",path:"/posts/732.%20My%20Calendar%20III_%E5%93%88%E5%B8%8C.html"},{excerpt:' \\792. Number of Matching Subsequences  Medium  Given string `S` and a dictionary of words `words`, find the number of `words[i]` that is a subsequence of `S`.  ``` Example : Input:  S = "abcde" wor......',tags:["_未分类_"],id:95,title:"792. Number of Matching Subsequences_哈希",lastUpdated:"2020-10-02 21:15:51",path:"/posts/792.%20Number%20of%20Matching%20Subsequences_%E5%93%88%E5%B8%8C.html"},{excerpt:" \\815. Bus Routes  Hard  We have a list of bus routes. Each `routes[i]` is a bus route that the i-th bus repeats forever. For example if `routes[0] = [1, 5, 7]`, this means that the first bus (0-th ......",tags:["_未分类_"],id:96,title:"815. Bus Routes_BFS",lastUpdated:"2020-10-02 21:15:51",path:"/posts/815.%20Bus%20Routes_BFS.html"},{excerpt:" 890. Find and Replace Pattern  Medium  You have a list of `words` and a `pattern`, and you want to know which words in `words` matches the pattern.  A word matches the pattern if there exists a per......",tags:["_未分类_"],id:97,title:"890. Find and Replace Pattern",lastUpdated:"2020-10-02 21:15:51",path:"/posts/890.%20Find%20and%20Replace%20Pattern.html"},{excerpt:" \\902. Numbers At Most N Given Digit Set  Hard  Given an array of `digits`, you can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may wr......",tags:["_未分类_"],id:98,title:"902. Numbers At Most N Given Digit Set",lastUpdated:"2020-10-02 21:15:51",path:"/posts/902.%20Numbers%20At%20Most%20N%20Given%20Digit%20Set.html"},{excerpt:" \\904. Fruit Into Baskets  Medium  In a row of trees, the `i`-th tree produces fruit with type `tree[i]`.  You **start at any tree of your choice**, then repeatedly perform the following steps:  1. ......",tags:["_未分类_"],id:99,title:"904. Fruit Into Baskets_移动窗口+哈希表",lastUpdated:"2020-10-02 21:15:51",path:"/posts/904.%20Fruit%20Into%20Baskets_%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3+%E5%93%88%E5%B8%8C%E8%A1%A8.html"},{excerpt:" / [28. 实现 strStr()](https://leetcode-cn.com/problems/implement-strstr/)  实现 [strStr()](https://baike.baidu.com/item/strstr/811469) 函数。  给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符......",tags:["String"],id:100,title:"28. 实现 strStr()_KMP",lastUpdated:"2020-10-02 10:31:11",path:"/posts/28.%20%E5%AE%9E%E7%8E%B0%20strStr()_KMP.html"}],i={name:"Layout",data:function(){return{isHide:!1,needOverlay:!1,content:a}},methods:{clickMenu:function(){this.isHide=!this.isHide,"undefined"!=typeof window&&window.innerWidth<=1190&&(this.needOverlay=!this.needOverlay)},close:function(){this.needOverlay=!this.needOverlay,this.isHide=!this.isHide}}},r=(s(524),s(66)),o=Object(r.a)(i,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticStyle:{height:"100%"}},[s("el-container",{staticClass:"main-container"},[s("my-aside",{attrs:{isHide:t.isHide}}),t._v(" "),s("el-container",{staticClass:"container-warp"},[s("my-header",{attrs:{showIcon:t.isHide},on:{clickMenu:t.clickMenu}},[t._v("\n        >")]),t._v(" "),s("my-main",{attrs:{isHide:t.isHide,content:t.content}})],1),t._v(" "),s("go-top")],1),t._v(" "),s("my-footer",{attrs:{content:t.content,isHide:t.isHide}}),t._v(" "),s("div",{staticClass:"overlay",class:{"overlay--active":t.needOverlay},on:{click:t.close}})],1)}),[],!1,null,"80d5f2bc",null);e.default=o.exports}}]);