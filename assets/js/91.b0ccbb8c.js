(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{669:function(t,s,a){"use strict";a.r(s);var n=a(66),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("##592. Fraction Addition and Subtraction")]),t._v(" "),a("p",[t._v("Medium")]),t._v(" "),a("p",[t._v("Given a string representing an expression of fraction addition and  subtraction, you need to return the calculation result in string format. The final result should be "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Irreducible_fraction",target:"_blank",rel:"noopener noreferrer"}},[t._v("irreducible fraction"),a("OutboundLink")],1),t._v(". If your final result is an integer, say "),a("code",[t._v("2")]),t._v(", you need to change it to the format of fraction that has denominator "),a("code",[t._v("1")]),t._v(". So in this case, "),a("code",[t._v("2")]),t._v(" should be converted to "),a("code",[t._v("2/1")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("Example 1:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Input:"-1/2+1/2"\nOutput: "0/1"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("Example 2:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Input:"-1/2+1/2+1/3"\nOutput: "1/3"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("Example 3:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Input:"1/3-1/2"\nOutput: "-1/6"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("Example 4:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Input:"5/3+1/3"\nOutput: "2/1"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("Note:")])]),t._v(" "),a("ol",[a("li",[t._v("The input string only contains "),a("code",[t._v("'0'")]),t._v(" to "),a("code",[t._v("'9'")]),t._v(", "),a("code",[t._v("'/'")]),t._v(", "),a("code",[t._v("'+'")]),t._v(" and "),a("code",[t._v("'-'")]),t._v(". So does the output.")]),t._v(" "),a("li",[t._v("Each fraction (input and output) has format "),a("code",[t._v("Â±numerator/denominator")]),t._v(". If the first input fraction or the output is positive, then "),a("code",[t._v("'+'")]),t._v(" will be omitted.")]),t._v(" "),a("li",[t._v("The input only contains valid "),a("strong",[t._v("irreducible fractions")]),t._v(", where the "),a("strong",[t._v("numerator")]),t._v(" and "),a("strong",[t._v("denominator")]),t._v(" of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction  format defined above.")]),t._v(" "),a("li",[t._v("The number of given fractions will be in the range [1,10].")]),t._v(" "),a("li",[t._v("The numerator and denominator of the "),a("strong",[t._v("final result")]),t._v(" are guaranteed to be valid and in the range of 32-bit int.")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fractionAddition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        stringstream "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            B"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__gcd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            B"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),t._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to_string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("è¿éç¨äº__gcd(x,y) å½æ°ï¼å±äº#include"),a("algorithm",[t._v("ä¸­çã")])],1),t._v(" "),a("p",[t._v("greatest common divisor")]),t._v(" "),a("p",[t._v("å¦å¤è¿ä¸ªé¢éçstringstreamï¼ ä¹æ¯æ¯æ¬¡è¾å¥ä¸ä¸ªcharå­ç¬¦ï¼ä»èå¾å¥½çå¯¹å­ç¬¦ä¸²è¿è¡äºå½å¥ã")]),t._v(" "),a("p",[t._v("è¿ä¸ªé¢å¶ä»leecodeç­æ¡é¿åº¦å¾é¿ï¼è¿éé¢æå¤§ç®åäºã")]),t._v(" "),a("p",[t._v("è½ç®åçåå æ¯ï¼è¿ä¸ªé¢å®æ¬è´¨ä¸å°±æ¯éå")]),t._v(" "),a("p",[t._v("A/B + a/b = (A"),a("em",[t._v("b + B")]),t._v("a)/B*b")]),t._v(" "),a("p",[t._v("ååä¹åï¼æ¾å°æå¤§å±æå æ°ï¼ç¶åA å B åæ¶é¤ä»¥è¿ä¸ª gcd å°±è¡äºã")])])}),[],!1,null,null,null);s.default=e.exports}}]);